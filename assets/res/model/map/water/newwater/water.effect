// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: water-vs:vert
      frag: water-fs:frag
      properties: &props
        occlusion:      { value: 1.0, target: pbrParams.x, editor: { parent: USE_LIGHT } }
        roughness:      { value: 0.1, target: pbrParams.y, editor: { parent: USE_LIGHT } }
        metallic:       { value: 0, target: pbrParams.z, editor: { parent: USE_LIGHT } }
        
        normalStrenth:  { value: 0.5, target: normalParams.x, editor: { parent: USE_NORMAL_MAP } }
        normalTile:     { value: 1, target: normalParams.y, editor: { parent: USE_NORMAL_MAP } }
        normalSpeed:    { value: [ 1, 0 ], target: normalParams.zw , editor: { parent: USE_NORMAL_MAP } }
        normalMap:      { value: normal, editor: { parent: USE_NORMAL_MAP } }

        depthDistance:  { value: 1. }
        shallowColor:   { value: [1, 1, 1, 1], editor: { type: color }  }
        deepColor:      { value: [0, 0, 0, 0] , editor: { type: color } }
        opacity:        { value: 1. }
        coastOpacity:   { value: 0.5 }

        foamColor:      { value: [1, 1, 1, 1], editor: { parent: USE_FOAM, type: color } }
        foamDistance:   { value: 0.35, target: foamParams.x, editor: { parent: USE_FOAM } }
        foamDensity:    { value: 0.5, target: foamParams.y, editor: { parent: USE_FOAM } }
        foamTile:       { value: 1, target: foamParams.z, editor: { parent: USE_FOAM } }
        foamContrast:   { value: 0.5, target: foamParams.w, editor: { parent: USE_FOAM } }

        waveVisuals:    { value: [ 0.167, 7, 0.54, 1 ], editor: { parent: USE_WAVE } }
        waveDirections: { value: [ 0, 0.3, 0.6, 0.67 ], editor: { parent: USE_WAVE } }

        causticStrength:    { value: 0.98,  target: causticParams1.x, editor: { parent: USE_CAUSTIC } }
        causticScale:       { value: 2.33,  target: causticParams1.y, editor: { parent: USE_CAUSTIC } }
        causticSpeed:       { value: 0.1,   target: causticParams1.z, editor: { parent: USE_CAUSTIC } }
        causticRGBSplit:    { value: 0.35,  target: causticParams1.w, editor: { parent: USE_CAUSTIC } }
        causticDepth:       { value: 1,  target: causticParams2.x, editor: { parent: USE_CAUSTIC } }
        causticColor:       { value: [1, 1, 1],   target: causticParams2.yzw, editor: { parent: USE_CAUSTIC, type: color } }
        causticTexture:     { value: white, editor: { parent: USE_CAUSTIC } }

        surfaceWaterDepth: { value: white , editor: { parent: USE_DEPTH }}
        depthGradientShallow:      { value: [0.325, 0.807, 0.971, 0.725], editor: { type: color, parent: USE_DEPTH }}
        depthGradientDeep:      { value: [0.086, 0.407, 1, 0.749], editor: { type: color, parent: USE_DEPTH}}
        depthMaxDistance: { value: 1.0 ,  editor: { parent: USE_DEPTH }}

  - name: transparent
    passes:
    - vert: water-vs:vert
      frag: water-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram shared-ubos %{
  #define pi 3.14

  #if USE_LIGHT
  uniform Light {
    vec4 pbrParams;
  };
  #endif

  uniform Water {
    vec4 normalParams;
    vec4 shallowColor;
    vec4 deepColor;
    vec4 waveVisuals;
    vec4 waveDirections;
    vec4 foamParams;
    vec4 foamColor;
    vec4 causticParams1;
    vec4 causticParams2;
    float depthDistance;
    float opacity;
    float coastOpacity;
  };
}%

CCProgram water-vs %{
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <shared-ubos>
  #include <cc-shadow-map-vs>
  #include <cc-fog>

  out vec3 v_position;
  out vec4 v_projPos;
  out vec2 v_uv;
  out vec3 v_normal;
  out float v_fog_factor;

  #if USE_NORMAL_MAP
    out vec3 v_tangent;
    out vec3 v_bitangent;
  #endif


  vec3 gerstner(vec3 position, float steepness, float wavelength, float speed, float direction, inout vec3 tangent, inout vec3 binormal)
  {
    direction = direction * 2. - 1.;
    vec2 d = normalize(vec2(cos(pi * direction), sin(pi * direction)));
    float s = steepness;
    float k = 2. * pi / wavelength;                                                      
    float f = k * (dot(d, position.xz) - speed * cc_time.x);
    float a = s / k;

    tangent += vec3(
      -d.x * d.x * s * sin(f),
      d.x * s * cos(f), 
      -d.x * d.y * s * sin(f)
    );

    binormal += vec3(
      -d.x * d.y * s * sin(f),
      d.y * s * cos(f),
      -d.y * d.y * s * sin(f)
    );

    return vec3(
      d.x * a * cos(f),
      a * sin(f),
      d.y * a * cos(f)
    );
  }


  void gerstnerWaves(vec3 p, vec3 visuals, vec4 directions, out vec3 offset, out vec3 normal, out vec3 T, out vec3 B)
  {
      float steepness = visuals.x ;
      float wavelength = visuals.y;
      float speed = visuals.z;

      offset = vec3(0,0,0);
      vec3 tangent = vec3(1, 0, 0);
      vec3 binormal = vec3(0, 0, 1);

      offset += gerstner(p, steepness, wavelength, speed, directions.x, tangent, binormal);
      offset += gerstner(p, steepness, wavelength, speed, directions.y, tangent, binormal);
      offset += gerstner(p, steepness, wavelength, speed, directions.z, tangent, binormal);
      offset += gerstner(p, steepness, wavelength, speed, directions.w, tangent, binormal);

      normal = normalize(cross(binormal, tangent));
      T = tangent;
      B = binormal;
  }

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 worldPos = matWorld * In.position;

    #if USE_WAVE
      vec3 offset;
      vec3 tangent;
      vec3 bitangent;
      gerstnerWaves(worldPos.xyz, waveVisuals.xyz, waveDirections, offset, v_normal, tangent, bitangent);
      worldPos.xyz += offset;

      #if USE_NORMAL_MAP
        v_tangent = tangent;
        v_bitangent = bitangent;
      #endif
    #endif

    v_position = worldPos.xyz;
    v_projPos = cc_matProj * cc_matView * worldPos;

    #if !USE_WAVE
      v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
      #if USE_NORMAL_MAP
        v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
        v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order
      #endif
    #endif

    v_uv = a_texCoord;
    
    // #if USE_VERTEX_COLOR
    //   v_color = a_color;
    // #endif
    v_fog_factor = CC_TRANSFER_FOG(worldPos);

    CCPassShadowParams(worldPos);

    return v_projPos;
  }
}%

CCProgram water-fs %{
  precision highp float;
  #include <cc-global>
  #include <shading-standard>
  #include <output-standard>
  #include <gamma>
  #include <shared-ubos>
  #include <cc-fog>
  #include <packing>

  in vec3 v_position;
  in vec4 v_projPos;
  in vec2 v_uv;
  in vec3 v_normal;
  in float v_fog_factor;

  // #pragma builtin(global)
  // layout(set = 0, binding = 7) uniform sampler2D cc_depth_buffer_map;

  #if USE_FOAM
  uniform sampler2D foamTexture;
  #endif

  #if USE_CAUSTIC
  uniform sampler2D causticTexture;
  #endif

  #if USE_NORMAL_MAP
    in vec3 v_tangent;
    in vec3 v_bitangent;
    uniform sampler2D normalMap;
  #endif

  #if USE_DEPTH
    uniform FsConstant {
      vec4 depthGradientShallow;
      vec4 depthGradientDeep;
      float depthMaxDistance;
    };
    uniform sampler2D surfaceWaterDepth;

  #endif

  vec3 normalBlend(vec3 A, vec3 B)
  {
    return normalize(vec3(A.rg + B.rg, A.b * B.b));
    // return normalize(A + B);
    // return B;
  }

  vec2 distort(vec2 uv, float amount)
  {
      float time = cc_time.x;
      
      uv.y += amount * 0.01 * (sin(uv.x * 3.5 + time * 0.35) + sin(uv.x * 4.8 + time * 1.05) + sin(uv.x * 7.3 + time * 0.45)) / 3.0;
      uv.x += amount * 0.12 * (sin(uv.y * 4.0 + time * 0.5) + sin(uv.y * 6.8 + time * 0.75) + sin(uv.y * 11.3 + time * 0.2)) / 3.0;
      uv.y += amount * 0.12 * (sin(uv.x * 4.2 + time * 0.64) + sin(uv.x * 6.3 + time * 1.65) + sin(uv.x * 8.2 + time * 0.45)) / 3.0;

      return uv;
  }


  //  foam
  void foamUVs(vec2 uv, vec4 movement, vec2 offset, vec2 scale, float depth, out vec4 shoreline, out vec4 custom)
  {
      float direction1 = movement.x;
      float direction2 = movement.z;
      float speed1 = movement.y;
      float speed2 = movement.w;
      float scale1 = scale.x;
      float scale2 = scale.y;

      vec2 shoreline_uv = vec2(uv.x * 0.2, depth);
      shoreline.xy = Panner(shoreline_uv, 0.5, speed1, vec2(0.,0.), 1/scale1);
      shoreline.zw = Panner(shoreline_uv, 0.5, speed2, vec2(0.,0.), 1/scale2);

      custom.xy = Panner(uv, direction1, speed1, vec2(0.,0.), 1/scale1);
      custom.zw = Panner(uv, direction2, speed2, offset, 1/scale2);
  }

  void foamSampling(vec4 uvs, float cutoff, float distortion, sampler2D tex, out float primary, out float secondary)
  {
      primary   = clamp(step(cutoff, texture(tex, distort(uvs.xy, distortion)).r), 0., 1.);
      secondary = clamp(step(cutoff, texture(tex, distort(uvs.zw, distortion)).g), 0., 1.);
  }

  vec4 foam (vec2 foamScale, vec4 foamColor) {
    #if USE_FOAM
      float foamCutOff = foamParams.x;
      float foamDistortion = foamParams.z;

      vec2 foamUv = distort(v_position.xz, foamDistortion);
      foamUv.x += cc_time.x * 0.1;
      float foamValue = texture(foamTexture, foamUv * foamScale ).r;
      foamValue = clamp(step(foamCutOff, foamValue), 0., 1.);
      return vec4(foamValue) * foamColor;
    #else
      return vec4(0.);
    #endif
  }


  // caustics

  #if USE_CAUSTIC
  vec2 panner(vec2 uv, float direction, float speed, vec2 offset, float tiling)
  {
      direction = direction * 2. - 1.;
      vec2 dir = normalize(vec2(cos(pi * direction), sin(pi * direction)));
      return  (dir * cc_time.x * speed) + offset + (uv * tiling);
  }

  vec3 rgbSplit(float split, sampler2D tex, vec2 uv)
  {
      vec2 UVR = uv + vec2(split, split);
      vec2 UVG = uv + vec2(split, -split);
      vec2 UVB = uv + vec2(-split, -split);

      float r = texture(tex, UVR).r;
      float g = texture(tex, UVG).g;
      float b = texture(tex, UVB).b;

      return vec3(r,g,b);
  }

  vec3 caustic()
  {
    vec2 uv = v_position.xz;

    float strength = causticParams1.x;
    float split = causticParams1.w * 0.01;
    float speed = causticParams1.z;
    float scale = causticParams1.y;

    vec3 texture1 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), 1./scale));
    vec3 texture2 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), -1./scale));
    vec3 textureCombined = min(texture1, texture2);

    return strength * 10. * textureCombined;
  }
  #endif

  // #include <../chunks/ubo-custom-common>

  // depth function

  // float worldDepthFade (vec4 sceneWorldPos, float dist) {
  //   return clamp((v_position.y - sceneWorldPos.y) / dist, 0., 1.);
  // }

  // float eyeDepthFade (float sceneEyeDepth, float eyeDepth, float dist) {
  //   return clamp((sceneEyeDepth - eyeDepth) / dist, 0., 1.);
  // }

  // vec4 getSceneWorldPos (float sceneEyeDepth0_1) {
  //   vec2 ndcXY = (v_projPos.xy / v_projPos.w);
  //   vec3 clipPos = vec3(ndcXY, 1.) * cc_projection_params.y;
  //   vec3 viewPos = (cc_matProjInv * clipPos.xyzz).xyz;
  //   viewPos *= sceneEyeDepth0_1;
  //   return cc_matViewInv * vec4(viewPos, 1.);
  // }
  
  // voronoi noise

  vec2 voronoihash( vec2 p )
  {
    p = vec2( dot( p, vec2( 127.1, 311.7 ) ), dot( p, vec2( 269.5, 183.3 ) ) );
    return fract( sin( p ) *43758.5453);
  }


  float voronoi( vec2 v, float time, float smoothness )
  {
    vec2 n = floor( v );
    vec2 f = fract( v );
    float F1 = 8.0;
    float F2 = 8.0;
    for ( int j = -1; j <= 1; j++ )
    {
      for ( int i = -1; i <= 1; i++ )
      {
        vec2 g = vec2( i, j );
        vec2 o = voronoihash( n + g );
        o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 );
        vec2 r = f - g - o;
        float d = 0.5 * dot( r, r );
      //		if( d<F1 ) {
      //			F2 = F1;
          float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness);
          F1 = mix(F1, d, h) - smoothness * h * (1.0 - h);
      //		} else if( d<F2 ) {
      //			F2 = d;
      //		}
      }
    }
    return F1;
  }

    vec4 alphaBlend(vec4 top, vec4 bottom)
  {
    vec3 color = (top.rgb * top.a) + (bottom.rgb * (1. - top.a));
    float alpha = top.a + bottom.a * (1. - top.a);
    return vec4(color, alpha);
  }

  // pbr

  #if USE_LIGHT
  vec4 surf (vec4 albedo) {
    StandardSurface s;

    s.albedo = albedo;
    s.normal = v_normal;

    #if USE_NORMAL_MAP
      float normalStrenth = normalParams.x;
      vec2 normalUV = v_uv * normalParams.y;
      vec2 moveUV = normalUV + normalParams.zw * cc_time.x / 40.;
      vec3 nmmp = normalBlend(texture(normalMap, moveUV).xyz - vec3(.5), texture(normalMap, normalUV).xyz - vec3(.5));
      s.normal =
        (nmmp.x * normalStrenth) * normalize(v_tangent) +
        (nmmp.y * normalStrenth) * normalize(v_bitangent) +
        nmmp.z * normalize(s.normal);
    #endif

    s.position = v_position;

    vec4 pbr = pbrParams;
    s.occlusion = clamp(pbr.x, 0.0, 0.96);
    s.roughness = clamp(pbr.y, 0.04, 1.0);
    s.metallic = pbr.z;

    return CCStandardShading(s);
  }
  #endif

  vec4 frag () {
    // depth
    // float far = cc_projection_params.y;

    // vec2 depthUv = (v_projPos.xy / v_projPos.w) * 0.5 + 0.5;
    // float sceneEyeDepth0_1 = unpackRGBAToDepth(texture(cc_depth_buffer_map, depthUv));
    // float sceneEyeDepth = sceneEyeDepth0_1 * far;

    // vec4 viewPos = cc_matView * vec4(v_position, 1.);
    // float eyeDepth = -viewPos.z;

    // vec4 sceneWorldPos = getSceneWorldPos(sceneEyeDepth0_1);

    // color
    vec4 waterColor = shallowColor;//mix(shallowColor, deepColor, eyeDepthFade(sceneEyeDepth, eyeDepth, depthDistance));

    // foam
    vec4 finalFoamColor = vec4(0.);
    #if USE_FOAM
      // vec2 foamUV = v_position.xz * foamParams.z;
      // float foamNoise = clamp(voronoi(foamUV, cc_time.x / 2., 1. - foamParams.y), 0., 1.);
      // finalFoamColor += pow(foamNoise, 1. - clamp(foamParams.w, 0., 0.95));
      // finalFoamColor *= 1. - eyeDepthFade(sceneEyeDepth, eyeDepth, foamParams.x);
    #endif


    // caustic
    vec4 finalCausticColor = vec4(0.);
    #if USE_CAUSTIC
      float causticDepth = causticParams2.x;
      vec3 causticColor = causticParams2.yzw;

      finalCausticColor.rgb = caustic() * causticColor;
      // finalCausticColor.rgb *= 1. - eyeDepthFade(sceneEyeDepth, eyeDepth, causticDepth);
    #endif

    #if USE_DEPTH
      float waterDepth = texture(surfaceWaterDepth, v_uv).r;
      float depth = clamp(1. - waterDepth / depthMaxDistance, 0., 1.);
      vec4 depthColor = mix(depthGradientShallow, depthGradientDeep, depth);
      waterColor = alphaBlend(depthColor, waterColor);
      // waterColor = depthColor;
      // return depthColor;
    #endif

    // final
    vec4 finalColor = waterColor + finalFoamColor + finalCausticColor;
    // finalColor *= opacity * eyeDepthFade(sceneEyeDepth, eyeDepth, coastOpacity);
    finalColor = CC_APPLY_FOG(finalColor, v_fog_factor);

    #if USE_LIGHT
    finalColor = surf(finalColor);
    finalColor = CCFragOutput(finalColor);
    #endif

    return finalColor;
  }
}%
